#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
NETTOYAGE ULTRA-AGRESSIF - √âLIMINATION D√âFINITIVE DES DONN√âES FRAN√áAISES
Script de nettoyage radical pour forcer la suppression de toutes les r√©f√©rences fran√ßaises
"""

import os
import re
import glob
from pathlib import Path

def nettoyage_ultra_agressif():
    """Nettoyage ultra-agressif de toutes les donn√©es fran√ßaises"""
    
    print("üî• NETTOYAGE ULTRA-AGRESSIF - √âLIMINATION D√âFINITIVE")
    print("=" * 60)
    
    # Patterns fran√ßais √† √©liminer d√©finitivement
    patterns_francais = [
        r'france',
        r'paris',
        r'lyon',
        r'marseille',
        r'toulouse',
        r'bordeaux',
        r'nantes',
        r'strasbourg',
        r'montpellier',
        r'nice',
        r'rennes',
        r'grenoble',
        r'dijon',
        r'angers',
        r'le mans',
        r'clermont-ferrand',
        r'tours',
        r'limoges',
        r'amiens',
        r'perpignan',
        r'metz',
        r'besan√ßon',
        r'caen',
        r'orl√©ans',
        r'mulhouse',
        r'rouen',
        r'argenteuil',
        r'montreuil',
        r'nancy',
        r'roubaix',
        r'fort-de-france',
        r'pointe-√†-pitre',
        r'noum√©a',
        r'papeete',
        r'cayenne',
        r'basel-mulhouse',
        r'charles de gaulle',
        r'orly',
        r'beauvais',
        r'lyon-saint-exup√©ry',
        r'marseille-provence',
        r'toulouse-blagnac',
        r'bordeaux-m√©rignac',
        r'nice-c√¥te d\'azur',
        r'strasbourg-entzheim',
        r'nantes-atlantique',
        r'rennes-saint-jacques',
        r'grenoble-is√®re',
        r'dijon-bourgogne',
        r'angers-loire',
        r'le mans-arnage',
        r'clermont-ferrand-auvergne',
        r'tours-val de loire',
        r'limoges-bellegarde',
        r'amiens-glisy',
        r'perpignan-rivesaltes',
        r'metz-nancy-lorraine',
        r'besan√ßon-thise',
        r'caen-carpiquet',
        r'orl√©ans-saran',
        r'mulhouse-b√¢le',
        r'rouen-vall√©e de seine',
        r'argenteuil-bezons',
        r'montreuil-sous-bois',
        r'nancy-essey',
        r'roubaix-tourcoing',
        r'fort-de-france-aim√© c√©saire',
        r'pointe-√†-pitre-le raizet',
        r'noum√©a-la tontouta',
        r'papeete-faaa',
        r'cayenne-rochambeau',
        r'basel-mulhouse-freiburg',
        r'charles de gaulle-roissy',
        r'orly-paris',
        r'beauvais-till√©',
        r'lyon-saint-exup√©ry-bron',
        r'marseille-provence-marignane',
        r'toulouse-blagnac-haute-garonne',
        r'bordeaux-m√©rignac-gironde',
        r'nice-c√¥te d\'azur-alpes-maritimes',
        r'strasbourg-entzheim-bas-rhin',
        r'nantes-atlantique-loire-atlantique',
        r'rennes-saint-jacques-ille-et-vilaine',
        r'grenoble-is√®re-is√®re',
        r'dijon-bourgogne-c√¥te-d\'or',
        r'angers-loire-maine-et-loire',
        r'le mans-arnage-sarthe',
        r'clermont-ferrand-auvergne-puy-de-d√¥me',
        r'tours-val de loire-indre-et-loire',
        r'limoges-bellegarde-haute-vienne',
        r'amiens-glisy-somme',
        r'perpignan-rivesaltes-pyr√©n√©es-orientales',
        r'metz-nancy-lorraine-moselle',
        r'besan√ßon-thise-doubs',
        r'caen-carpiquet-calvados',
        r'orl√©ans-saran-loiret',
        r'mulhouse-b√¢le-haut-rhin',
        r'rouen-vall√©e de seine-seine-maritime',
        r'argenteuil-bezons-val-d\'oise',
        r'montreuil-sous-bois-seine-saint-denis',
        r'nancy-essey-meurthe-et-moselle',
        r'roubaix-tourcoing-nord',
        r'fort-de-france-aim√© c√©saire-martinique',
        r'pointe-√†-pitre-le raizet-guadeloupe',
        r'noum√©a-la tontouta-nouvelle-cal√©donie',
        r'papeete-faaa-polyn√©sie fran√ßaise',
        r'cayenne-rochambeau-guyane'
    ]
    
    # Patterns sp√©cifiques √† √©liminer
    patterns_specifiques = [
        r'station_meteo_paris',
        r'PARIS001',
        r'meteo_france',
        r'Ferme du Ma√Øs d\'Argent',
        r'nord-ouest'
    ]
    
    # Combiner tous les patterns
    tous_patterns = patterns_francais + patterns_specifiques
    
    # Fichiers √† traiter
    fichiers_xml = [
        'data/demo_data_maroc.xml',
        'data/demo_data_simple.xml',
        'data/nettoyage_complet_francais.xml',
        'data/donnees_intenses.xml',
        'data/donnees_maroc_principales.xml',
        'data/donnees_supplementaires.xml',
        'data/remplacement_odoo18_maroc.xml',
        'views/meteo_views.xml',
        'views/station_meteo_views.xml'
    ]
    
    total_remplacements = 0
    
    for fichier in fichiers_xml:
        if os.path.exists(fichier):
            print(f"\nüîç Traitement de {fichier}...")
            
            try:
                with open(fichier, 'r', encoding='utf-8') as f:
                    contenu = f.read()
                
                contenu_original = contenu
                remplacements_fichier = 0
                
                # Remplacer tous les patterns fran√ßais
                for pattern in tous_patterns:
                    # Compter les occurrences
                    occurrences = len(re.findall(pattern, contenu, re.IGNORECASE))
                    if occurrences > 0:
                        print(f"   ‚ö†Ô∏è  {occurrences} occurrence(s) de '{pattern}' trouv√©e(s)")
                        
                        # Remplacer par des valeurs marocaines
                        if 'paris' in pattern.lower():
                            remplacement = 'rabat'
                        elif 'france' in pattern.lower():
                            remplacement = 'maroc'
                        elif 'station_meteo_paris' in pattern.lower():
                            remplacement = 'station_meteo_rabat'
                        elif 'meteo_france' in pattern.lower():
                            remplacement = 'meteo_maroc'
                        elif 'Ferme du Ma√Øs d\'Argent' in pattern:
                            remplacement = 'Ferme du Ma√Øs d\'Argent - Maroc'
                        elif 'nord-ouest' in pattern.lower():
                            remplacement = 'Nord'
                        else:
                            remplacement = 'maroc'
                        
                        contenu = re.sub(pattern, remplacement, contenu, flags=re.IGNORECASE)
                        remplacements_fichier += occurrences
                
                # Si des changements ont √©t√© faits, sauvegarder
                if contenu != contenu_original:
                    with open(fichier, 'w', encoding='utf-8') as f:
                        f.write(contenu)
                    
                    print(f"   ‚úÖ {remplacements_fichier} remplacement(s) effectu√©(s)")
                    total_remplacements += remplacements_fichier
                else:
                    print(f"   ‚úÖ Aucun changement n√©cessaire")
                    
            except Exception as e:
                print(f"   ‚ùå Erreur lors du traitement: {e}")
        else:
            print(f"   ‚ö†Ô∏è  Fichier {fichier} non trouv√©")
    
    print(f"\nüéØ R√âSUM√â DU NETTOYAGE ULTRA-AGRESSIF")
    print("=" * 50)
    print(f"Total des remplacements: {total_remplacements}")
    
    if total_remplacements > 0:
        print("üî• NETTOYAGE TERMIN√â - RED√âMARRAGE D'ODOO REQUIS")
        print("‚ö†Ô∏è  IMPORTANT: Red√©marrez Odoo pour appliquer les changements!")
    else:
        print("‚úÖ Aucune donn√©e fran√ßaise trouv√©e - Nettoyage termin√©")

if __name__ == "__main__":
    nettoyage_ultra_agressif()
