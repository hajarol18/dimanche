# -*- coding: utf-8 -*-

from odoo import models, fields, api

class SmartAgriExploitation(models.Model):
    _name = 'smart_agri_exploitation'
    _description = 'Exploitation Agricole'
    _order = 'name'

    name = fields.Char('Nom de l exploitation', required=True)
    code = fields.Char('Code', required=True, default='New')
    description = fields.Text('Description')
    latitude = fields.Float('Latitude', digits=(10, 6))
    longitude = fields.Float('Longitude', digits=(10, 6))
    superficie_totale = fields.Float('Superficie totale (ha)', required=True)
    proprietaire = fields.Char('Proprietaire')
    telephone = fields.Char('Telephone')
    email = fields.Char('Email')
    active = fields.Boolean('Actif', default=True)
    state = fields.Selection([
        ('brouillon', 'Brouillon'),
        ('actif', 'Actif'),
        ('archive', 'Archive')
    ], string='Etat', default='brouillon')
    
    # RELATIONS AVEC LES AUTRES MODÈLES
    parcelle_ids = fields.One2many('smart_agri_parcelle', 'exploitation_id', string='Parcelles')
    culture_ids = fields.One2many('smart_agri_culture', 'exploitation_id', string='Cultures')
    intervention_ids = fields.One2many('smart_agri_intervention', 'exploitation_id', string='Interventions')
    
    # CHAMPS CALCULÉS - LOGIQUE MÉTIER CRITIQUE
    nombre_parcelles = fields.Integer('Nombre de parcelles', compute='_compute_nombre_parcelles', store=True)
    surface_utilisee = fields.Float('Surface utilisée (ha)', compute='_compute_surface_utilisee', store=True)
    surface_disponible = fields.Float('Surface disponible (ha)', compute='_compute_surface_disponible', store=True)

    @api.depends('parcelle_ids')
    def _compute_nombre_parcelles(self):
        """Calcule le nombre de parcelles de l'exploitation"""
        for record in self:
            record.nombre_parcelles = len(record.parcelle_ids)
    
    @api.depends('parcelle_ids.surface')
    def _compute_surface_utilisee(self):
        """Calcule la surface utilisée par les parcelles"""
        for record in self:
            record.surface_utilisee = sum(record.parcelle_ids.mapped('surface'))
    
    @api.depends('superficie_totale', 'surface_utilisee')
    def _compute_surface_disponible(self):
        """Calcule la surface disponible"""
        for record in self:
            record.surface_disponible = record.superficie_totale - record.surface_utilisee

    @api.constrains('superficie_totale', 'latitude', 'longitude')
    def _check_data_coherence(self):
        """Vérifie la cohérence des données de l'exploitation"""
        for record in self:
            # Validation superficie
            if record.superficie_totale and record.superficie_totale <= 0:
                raise ValidationError("❌ La superficie totale de l'exploitation doit être strictement positive.")
            
            # Validation coordonnées si renseignées
            if record.latitude and (record.latitude < -90 or record.latitude > 90):
                raise ValidationError("❌ La latitude doit être comprise entre -90 et 90.")
            if record.longitude and (record.longitude < -180 or record.longitude > 180):
                raise ValidationError("❌ La longitude doit être comprise entre -180 et 180.")
            
            # Validation email si renseigné
            if record.email and '@' not in record.email:
                raise ValidationError("❌ Format d'email invalide.")

    @api.model_create_multi
    def create(self, vals_list):
        for vals in vals_list:
            if vals.get('code', 'New') == 'New':
                vals['code'] = self.env['ir.sequence'].next_by_code('smart.agri.exploitation.code') or 'New'
        return super().create(vals_list)