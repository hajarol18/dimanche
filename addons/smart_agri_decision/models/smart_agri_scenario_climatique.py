# -*- coding: utf-8 -*-

from odoo import models, fields, api
from odoo.exceptions import ValidationError
import logging

_logger = logging.getLogger(__name__)


class SmartAgriScenarioClimatique(models.Model):
    """Sc√©narios climatiques personnalis√©s pour simulations"""

    _name = 'smart_agri_scenario_climatique'
    _description = 'Sc√©nario Climatique Agricole'
    _order = 'name'

    # RELATIONS PRINCIPALES
    exploitation_id = fields.Many2one('smart_agri_exploitation', string='Exploitation', ondelete='cascade')
    
    # Champs de base
    name = fields.Char('Nom du sc√©nario', required=True)
    description = fields.Text('Description du sc√©nario')
    code = fields.Char('Code sc√©nario', required=True, size=20)
    
    # Type de sc√©nario
    type_scenario = fields.Selection([
        ('secheresse', 'üåµ Sc√©nario S√©cheresse'),
        ('pluie_abondante', 'üåßÔ∏è Sc√©nario Pluie Abondante'),
        ('canicule', 'üî• Sc√©nario Canicule'),
        ('hiver_rigoureux', '‚ùÑÔ∏è Sc√©nario Hiver Rigoureux'),
        ('mousson_tardive', 'üå¶Ô∏è Sc√©nario Mousson Tardive'),
        ('vent_fort', 'üí® Sc√©nario Vent Fort'),
        ('variabilite_climatique', 'üîÑ Variabilit√© Climatique'),
        ('rechauffement_global', 'üåç R√©chauffement Global'),
        ('refroidissement', 'üßä Refroidissement'),
        ('personnalise', '‚öôÔ∏è Sc√©nario Personnalis√©'),
        ('autre', 'üîç Autre')
    ], string='Type de sc√©nario', required=True)
    
    # P√©riode du sc√©nario
    date_debut = fields.Date('Date de d√©but', required=True)
    date_fin = fields.Date('Date de fin', required=True)
    duree_jours = fields.Integer('Dur√©e (jours)', compute='_compute_duree', store=True)
    
    # Param√®tres climatiques du sc√©nario
    temperature_base = fields.Float('Temp√©rature de base (¬∞C)', default=20.0)
    variation_temperature = fields.Float('Variation temp√©rature (¬∞C)', default=0.0, 
                                       help='Variation par rapport √† la normale')
    temperature_min = fields.Float('Temp√©rature minimale (¬∞C)')
    temperature_max = fields.Float('Temp√©rature maximale (¬∞C)')
    
    precipitation_base = fields.Float('Pr√©cipitations de base (mm)', default=0.0)
    variation_precipitation = fields.Float('Variation pr√©cipitations (%)', default=0.0,
                                         help='Variation en pourcentage par rapport √† la normale')
    precipitation_min = fields.Float('Pr√©cipitations minimales (mm)')
    precipitation_max = fields.Float('Pr√©cipitations maximales (mm)')
    
    humidite_base = fields.Float('Humidit√© de base (%)', default=60.0)
    variation_humidite = fields.Float('Variation humidit√© (%)', default=0.0)
    humidite_min = fields.Float('Humidit√© minimale (%)')
    humidite_max = fields.Float('Humidit√© maximale (%)')
    
    vent_base = fields.Float('Vent de base (km/h)', default=10.0)
    variation_vent = fields.Float('Variation vent (km/h)', default=0.0)
    vent_min = fields.Float('Vent minimal (km/h)')
    vent_max = fields.Float('Vent maximal (km/h)')
    
    # Intensit√© du sc√©nario
    intensite = fields.Selection([
        ('faible', 'üü¢ Faible'),
        ('moderee', 'üü° Mod√©r√©e'),
        ('forte', 'üü† Forte'),
        ('extreme', 'üî¥ Extr√™me'),
        ('catastrophique', '‚ö´ Catastrophique')
    ], string='Intensit√©', required=True, default='moderee')
    
    # Probabilit√© d'occurrence
    probabilite_occurrence = fields.Selection([
        ('tres_faible', 'Tr√®s faible (0-20%)'),
        ('faible', 'Faible (20-40%)'),
        ('moyenne', 'Moyenne (40-60%)'),
        ('elevee', '√âlev√©e (60-80%)'),
        ('tres_elevee', 'Tr√®s √©lev√©e (80-100%)')
    ], string='Probabilit√© d\'occurrence', default='moyenne')
    
    # Impact agricole pr√©vu
    impact_rendement = fields.Float('Impact sur rendement (%)', default=0.0,
                                  help='Variation du rendement en pourcentage')
    impact_qualite = fields.Selection([
        ('amelioration', 'Am√©lioration'),
        ('stable', 'Stable'),
        ('degradation_legere', 'D√©gradation l√©g√®re'),
        ('degradation_moderee', 'D√©gradation mod√©r√©e'),
        ('degradation_severe', 'D√©gradation s√©v√®re')
    ], string='Impact sur la qualit√©', default='stable')
    
    # Cultures affect√©es
    cultures_affectees = fields.Many2many('smart_agri_culture', string='Cultures affect√©es')
    parcelles_affectees = fields.Many2many('smart_agri_parcelle', string='Parcelles affect√©es')
    
    # Mesures d'adaptation recommand√©es
    mesures_adaptation = fields.Text('Mesures d\'adaptation recommand√©es')
    actions_preventives = fields.Text('Actions pr√©ventives')
    actions_curatives = fields.Text('Actions curatives')
    
    # Simulation et r√©sultats
    simulation_lancee = fields.Boolean('Simulation lanc√©e', default=False)
    date_simulation = fields.Datetime('Date de simulation')
    resultats_simulation = fields.Text('R√©sultats de la simulation')
    
    # Statut
    state = fields.Selection([
        ('brouillon', 'Brouillon'),
        ('valide', 'Valid√©'),
        ('simulation_en_cours', 'Simulation en cours'),
        ('simulation_terminee', 'Simulation termin√©e'),
        ('archive', 'Archiv√©')
    ], string='√âtat', default='brouillon', required=True)
    
    active = fields.Boolean('Actif', default=True)
    notes = fields.Text('Notes et observations')

    @api.depends('date_debut', 'date_fin')
    def _compute_duree(self):
        """Calcule la dur√©e du sc√©nario en jours"""
        for record in self:
            if record.date_debut and record.date_fin:
                delta = record.date_fin - record.date_debut
                record.duree_jours = delta.days + 1
            else:
                record.duree_jours = 0

    @api.model_create_multi
    def create(self, vals_list):
        """G√©n√©ration automatique du code sc√©nario"""
        for vals in vals_list:
            if not vals.get('code'):
                name = vals.get('name', 'SCEN')
                code = name.upper().replace(' ', '_')[:15]
                counter = 1
                while self.search_count([('code', '=', code)]) > 0:
                    code = f"{name.upper().replace(' ', '_')[:12]}_{counter:03d}"
                    counter += 1
                vals['code'] = code
        return super().create(vals_list)

    def action_lancer_simulation(self):
        """Lance la simulation du sc√©nario climatique"""
        self.ensure_one()
        
        if not self.exploitation_id:
            raise ValidationError("Une exploitation doit √™tre s√©lectionn√©e pour la simulation.")
        
        try:
            # Mise √† jour du statut
            self.write({
                'state': 'simulation_en_cours',
                'simulation_lancee': True,
                'date_simulation': fields.Datetime.now()
            })
            
            # Simulation des impacts
            resultats = self._simuler_impacts()
            
            # Mise √† jour des r√©sultats
            self.write({
                'resultats_simulation': resultats,
                'state': 'simulation_terminee'
            })
            
            return {
                'type': 'ir.actions.client',
                'tag': 'display_notification',
                'params': {
                    'title': 'Simulation termin√©e !',
                    'message': f'La simulation du sc√©nario {self.name} a √©t√© lanc√©e avec succ√®s.',
                    'type': 'success',
                }
            }
            
        except Exception as e:
            _logger.error(f"Erreur simulation sc√©nario: {str(e)}")
            self.write({'state': 'brouillon'})
            raise ValidationError(f"Erreur lors de la simulation: {str(e)}")

    def _simuler_impacts(self):
        """Simule les impacts du sc√©nario climatique"""
        resultats = []
        
        # Analyse de l'intensit√©
        if self.intensite == 'extreme':
            impact_rendement = -30
        elif self.intensite == 'forte':
            impact_rendement = -15
        elif self.intensite == 'moderee':
            impact_rendement = -5
        elif self.intensite == 'faible':
            impact_rendement = 0
        else:  # catastrophique
            impact_rendement = -50
        
        # Ajustement selon le type de sc√©nario
        if self.type_scenario == 'secheresse':
            impact_rendement -= 20
            resultats.append("üåµ S√©cheresse: Impact s√©v√®re sur les cultures non irrigu√©es")
        elif self.type_scenario == 'canicule':
            impact_rendement -= 15
            resultats.append("üî• Canicule: Stress thermique des cultures")
        elif self.type_scenario == 'pluie_abondante':
            impact_rendement -= 10
            resultats.append("üåßÔ∏è Pluie abondante: Risque de maladies fongiques")
        elif self.type_scenario == 'hiver_rigoureux':
            impact_rendement -= 25
            resultats.append("‚ùÑÔ∏è Hiver rigoureux: Risque de gel des cultures sensibles")
        
        # Calcul final de l'impact
        impact_final = impact_rendement + self.impact_rendement
        resultats.append(f"üìä Impact sur le rendement: {impact_final:.1f}%")
        
        # Recommandations
        if impact_final < -20:
            resultats.append("üö® Actions d'urgence recommand√©es")
        elif impact_final < -10:
            resultats.append("‚ö†Ô∏è Mesures pr√©ventives n√©cessaires")
        else:
            resultats.append("‚úÖ Impact limit√©, surveillance recommand√©e")
        
        return "\n".join(resultats)

    def action_generer_alertes(self):
        """G√©n√®re des alertes bas√©es sur le sc√©nario"""
        self.ensure_one()
        
        if not self.exploitation_id:
            return
        
        # Cr√©ation d'alertes selon le sc√©nario
        alerte_data = {
            'name': f'Alerte Sc√©nario: {self.name}',
            'exploitation_id': self.exploitation_id.id,
            'type_alerte': self._get_type_alerte(),
            'niveau': self._get_niveau_alerte(),
            'severite': self.intensite,
            'description': f'Sc√©nario climatique: {self.description}',
            'source': 'scenario_climatique',
            'type_source': 'scenario_rcp'
        }
        
        alerte = self.env['smart_agri_alerte_climatique'].create(alerte_data)
        
        return {
            'type': 'ir.actions.act_window',
            'res_model': 'smart_agri_alerte_climatique',
            'res_id': alerte.id,
            'view_mode': 'form',
            'target': 'current'
        }

    def _get_type_alerte(self):
        """Retourne le type d'alerte selon le sc√©nario"""
        mapping = {
            'secheresse': 'secheresse',
            'canicule': 'canicule',
            'pluie_abondante': 'inondation',
            'hiver_rigoureux': 'gel',
            'vent_fort': 'vent_fort',
            'grele': 'grele'
        }
        return mapping.get(self.type_scenario, 'autre')

    def _get_niveau_alerte(self):
        """Retourne le niveau d'alerte selon l'intensit√©"""
        mapping = {
            'faible': 'jaune',
            'moderee': 'orange',
            'forte': 'rouge',
            'extreme': 'rouge',
            'catastrophique': 'noir'
        }
        return mapping.get(self.intensite, 'jaune')

    # CONTRAINTES
    @api.constrains('date_debut', 'date_fin')
    def _check_dates(self):
        """V√©rifie la coh√©rence des dates"""
        for record in self:
            if record.date_debut and record.date_fin:
                if record.date_debut > record.date_fin:
                    raise ValidationError('La date de d√©but doit √™tre ant√©rieure √† la date de fin.')
    
    @api.constrains('variation_temperature', 'variation_precipitation', 'variation_humidite')
    def _check_variations(self):
        """V√©rifie la coh√©rence des variations"""
        for record in self:
            if abs(record.variation_temperature) > 50:
                raise ValidationError('La variation de temp√©rature doit √™tre comprise entre -50¬∞C et +50¬∞C.')
            if abs(record.variation_precipitation) > 500:
                raise ValidationError('La variation de pr√©cipitations doit √™tre comprise entre -500% et +500%.')
            if abs(record.variation_humidite) > 100:
                raise ValidationError('La variation d\'humidit√© doit √™tre comprise entre -100% et +100%.')