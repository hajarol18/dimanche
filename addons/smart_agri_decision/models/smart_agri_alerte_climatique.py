# -*- coding: utf-8 -*-

from odoo import models, fields, api, _
from odoo.exceptions import ValidationError
from datetime import datetime, timedelta
import logging

_logger = logging.getLogger(__name__)


class SmartAgriAlerteClimatique(models.Model):
    """Alertes climatiques automatiques selon le cahier des charges"""

    _name = 'smart_agri_alerte_climatique'
    _description = 'Alerte Climatique Agricole'
    _order = 'date_detection desc, niveau desc'
    _rec_name = 'name'
    _inherit = ['mail.thread', 'mail.activity.mixin']

    # RELATION PRINCIPALE
    exploitation_id = fields.Many2one('smart_agri_exploitation', string='Exploitation', required=True, ondelete='cascade')
    
    # Champs de base
    name = fields.Char('Nom de l\'alerte', required=True)
    description = fields.Text('Description d√©taill√©e de l\'alerte')
    
    # Type d'alerte selon cahier des charges
    type_alerte = fields.Selection([
        ('secheresse', 'üåµ S√©cheresse'),
        ('gel', '‚ùÑÔ∏è Gel'),
        ('canicule', 'üî• Canicule'),
        ('inondation', 'üåä Inondation'),
        ('vent_fort', 'üí® Vent fort'),
        ('grele', 'üßä Gr√™le'),
        ('autre', '‚ö†Ô∏è Autre')
    ], string='Type d\'alerte', required=True)
    
    # Niveau de gravit√©
    niveau = fields.Selection([
        ('vert', 'üü¢ Normal'),
        ('jaune', 'üü° Attention'),
        ('orange', 'üü† Alerte'),
        ('rouge', 'üî¥ Danger'),
        ('noir', '‚ö´ Extr√™me')
    ], string='Niveau de gravit√©', required=True, default='jaune')
    
    # Dates
    date_detection = fields.Date('Date de d√©tection', required=True, default=fields.Date.today)
    date_debut = fields.Date('Date de d√©but de l\'√©v√©nement')
    date_fin = fields.Date('Date de fin de l\'√©v√©nement')
    
    # Source de l'alerte
    source = fields.Selection([
        ('import_meteo', 'üå§Ô∏è Import M√©t√©o Automatique'),
        ('api_meteo', 'üåç API M√©t√©o Externe'),
        ('capteur_local', 'üì° Capteur Local'),
        ('utilisateur', 'üë§ Saisie Utilisateur'),
        ('ia_prediction', 'üß† Pr√©diction IA'),
        ('autre', 'üìä Autre')
    ], string='Source de l\'alerte', required=True, default='import_meteo')
    
    # Param√®tres m√©t√©orologiques d√©clencheurs
    temperature_min = fields.Float('Temp√©rature minimale (¬∞C)')
    temperature_max = fields.Float('Temp√©rature maximale (¬∞C)')
    precipitation = fields.Float('Pr√©cipitations (mm)')
    humidite = fields.Float('Humidit√© (%)')
    vent_vitesse = fields.Float('Vitesse du vent (km/h)')
    
    # Impact agricole
    impact_cultures = fields.Many2many('smart_agri_culture', string='Cultures impact√©es')
    impact_parcelles = fields.Many2many('smart_agri_parcelle', string='Parcelles impact√©es')
    niveau_impact = fields.Selection([
        ('faible', 'üü¢ Faible'),
        ('modere', 'üü° Mod√©r√©'),
        ('eleve', 'üü† √âlev√©'),
        ('critique', 'üî¥ Critique'),
        ('catastrophique', '‚ö´ Catastrophique')
    ], string='Niveau d\'impact agricole', default='modere')
    
    # Actions recommand√©es
    actions_recommandees = fields.Text('Actions recommand√©es')
    actions_urgentes = fields.Text('Actions urgentes √† effectuer')
    
    # Statut de l'alerte
    state = fields.Selection([
        ('active', 'üö® Active'),
        ('surveillee', 'üëÅÔ∏è Surveill√©e'),
        ('resolue', '‚úÖ R√©solue'),
        ('fausse_alerte', '‚ùå Fausse alerte'),
        ('archiv√©e', 'üìÅ Archiv√©e')
    ], string='√âtat de l\'alerte', default='active')
    
    # Notifications
    notifiee = fields.Boolean('Alerte notifi√©e', default=False)
    date_notification = fields.Datetime('Date de notification')
    
    # Notes et commentaires
    notes = fields.Text('Notes et commentaires')
    
    # Priorit√© de traitement
    priorite = fields.Selection([
        ('basse', 'üü¢ Basse'),
        ('normale', 'üü° Normale'),
        ('haute', 'üü† Haute'),
        ('urgente', 'üî¥ Urgente'),
        ('critique', '‚ö´ Critique')
    ], string='Priorit√© de traitement', compute='_compute_priorite', store=True)
    
    # Statut
    active = fields.Boolean('Actif', default=True)
    
    # Calcul automatique de la priorit√©
    @api.depends('niveau', 'type_alerte', 'niveau_impact')
    def _compute_priorite(self):
        """Calcule automatiquement la priorit√© de traitement"""
        for record in self:
            # Priorit√© bas√©e sur le niveau et le type d'alerte
            if record.niveau in ['noir', 'rouge']:
                record.priorite = 'critique'
            elif record.niveau == 'orange':
                record.priorite = 'urgente'
            elif record.niveau == 'jaune':
                record.priorite = 'haute'
            else:
                record.priorite = 'normale'
            
            # Ajuster selon le type d'alerte
            if record.type_alerte in ['gel', 'grele']:
                record.priorite = 'urgente' if record.priorite == 'haute' else record.priorite
            elif record.type_alerte == 'secheresse' and record.niveau_impact in ['eleve', 'critique']:
                record.priorite = 'urgente' if record.priorite == 'haute' else record.priorite

    # M√©thode pour notifier l'alerte
    def notifier_alerte(self):
        """Notifie l'alerte aux utilisateurs concern√©s"""
        for record in self:
            if not record.notifiee:
                record.notifiee = True
                record.date_notification = fields.Datetime.now()
                
                # Cr√©ation d'un message dans le syst√®me de messagerie Odoo
                try:
                    record.message_post(
                        body=f"Alerte climatique {record.type_alerte} - Niveau {record.niveau} d√©tect√©e pour l'exploitation {record.exploitation_id.name}",
                        subject=f"üö® Alerte Climatique: {record.name}",
                        message_type='notification'
                    )
                except Exception as e:
                    # Fallback si message_post √©choue
                    _logger.warning(f"Impossible de poster le message: {e}")
                
                # Log de la notification
                _logger.info(f"Alerte climatique notifi√©e: {record.name} pour {record.exploitation_id.name}")

    # M√©thode pour r√©soudre l'alerte
    def resoudre_alerte(self):
        """Marque l'alerte comme r√©solue"""
        for record in self:
            record.state = 'resolue'
            record.date_fin = fields.Date.today()

    # M√©thode pour archiver l'alerte
    def archiver_alerte(self):
        """Archive l'alerte"""
        for record in self:
            record.state = 'archiv√©e'
            record.active = False

    # M√©thode pour cr√©er des alertes automatiques selon les donn√©es m√©t√©o
    @api.model
    def creer_alerte_automatique(self, exploitation_id, type_alerte, niveau, description, source='import_meteo'):
        """Cr√©e automatiquement une alerte climatique"""
        return self.create({
            'name': f'Alerte {type_alerte} - {exploitation_id.name}',
            'exploitation_id': exploitation_id.id,
            'type_alerte': type_alerte,
            'niveau': niveau,
            'description': description,
            'source': source,
            'date_detection': fields.Date.today(),
            'state': 'active'
        })

    # Contraintes de validation
    @api.constrains('date_debut', 'date_fin')
    def _check_dates_alerte(self):
        """V√©rifie la coh√©rence des dates d'alerte"""
        for record in self:
            if record.date_debut and record.date_fin:
                if record.date_debut > record.date_fin:
                    raise ValidationError(_("La date de d√©but doit √™tre ant√©rieure √† la date de fin."))

    @api.constrains('temperature_min', 'temperature_max')
    def _check_temperatures(self):
        """V√©rifie la coh√©rence des temp√©ratures"""
        for record in self:
            if record.temperature_min and record.temperature_max:
                if record.temperature_min > record.temperature_max:
                    raise ValidationError(_("La temp√©rature minimale doit √™tre inf√©rieure √† la temp√©rature maximale."))

    @api.constrains('humidite')
    def _check_humidite(self):
        """V√©rifie la validit√© de l'humidit√©"""
        for record in self:
            if record.humidite and (record.humidite < 0 or record.humidite > 100):
                raise ValidationError(_("L'humidit√© doit √™tre comprise entre 0 et 100%."))

    # M√©thode pour g√©n√©rer des recommandations automatiques
    def generer_recommandations(self):
        """G√©n√®re automatiquement des recommandations selon le type d'alerte"""
        for record in self:
            if record.type_alerte == 'secheresse':
                record.actions_recommandees = """
                üå± Actions recommand√©es en cas de s√©cheresse:
                ‚Ä¢ Augmenter la fr√©quence d'irrigation
                ‚Ä¢ Utiliser des techniques de paillage
                ‚Ä¢ Surveiller l'√©tat hydrique des sols
                ‚Ä¢ Adapter les cultures √† la s√©cheresse
                """
                record.actions_urgentes = """
                üö® Actions urgentes:
                ‚Ä¢ V√©rifier les syst√®mes d'irrigation
                ‚Ä¢ R√©duire les pertes d'eau
                ‚Ä¢ Planifier l'irrigation d'urgence
                """
                
            elif record.type_alerte == 'gel':
                record.actions_recommandees = """
                ‚ùÑÔ∏è Actions recommand√©es en cas de gel:
                ‚Ä¢ Prot√©ger les cultures sensibles
                ‚Ä¢ Utiliser des voiles de protection
                ‚Ä¢ Surveiller les pr√©visions m√©t√©o
                ‚Ä¢ Retarder les plantations si possible
                """
                record.actions_urgentes = """
                üö® Actions urgentes:
                ‚Ä¢ Installer les protections anti-gel
                ‚Ä¢ V√©rifier les syst√®mes de chauffage
                ‚Ä¢ Pr√©parer les plans d'urgence
                """
                
            elif record.type_alerte == 'canicule':
                record.actions_recommandees = """
                üî• Actions recommand√©es en cas de canicule:
                ‚Ä¢ Augmenter l'irrigation
                ‚Ä¢ Prot√©ger du soleil intense
                ‚Ä¢ Surveiller le stress hydrique
                ‚Ä¢ Adapter les horaires de travail
                """
                record.actions_urgentes = """
                üö® Actions urgentes:
                ‚Ä¢ Irrigation d'urgence
                ‚Ä¢ Protection des cultures sensibles
                ‚Ä¢ Surveillance renforc√©e
                """

    # M√©thode pour analyser l'impact sur les cultures
    def analyser_impact_cultures(self):
        """Analyse l'impact de l'alerte sur les cultures de l'exploitation"""
        for record in self:
            if record.exploitation_id:
                # R√©cup√©rer les cultures actives
                cultures_actives = self.env['smart_agri_culture'].search([
                    ('exploitation_id', '=', record.exploitation_id.id),
                    ('state', '=', 'active')
                ])
                
                if cultures_actives:
                    record.impact_cultures = [(6, 0, cultures_actives.ids)]
                    
                    # Analyser la vuln√©rabilit√© selon le type d'alerte
                    cultures_vulnerables = []
                    for culture in cultures_actives:
                        if record.type_alerte == 'secheresse' and culture.famille in ['cereales', 'legumes']:
                            cultures_vulnerables.append(culture.id)
                        elif record.type_alerte == 'gel' and culture.famille in ['fruits', 'legumes_precoces']:
                            cultures_vulnerables.append(culture.id)
                        elif record.type_alerte == 'canicule' and culture.famille in ['legumes', 'fruits']:
                            cultures_vulnerables.append(culture.id)
                    
                    if cultures_vulnerables:
                        record.impact_cultures = [(6, 0, cultures_vulnerables)]
                        record.niveau_impact = 'eleve'
                    else:
                        record.niveau_impact = 'modere'
