# -*- coding: utf-8 -*-

from odoo import models, fields, api, _
from odoo.exceptions import ValidationError
from datetime import datetime, timedelta
import logging

_logger = logging.getLogger(__name__)


class SmartAgriStationMeteo(models.Model):
    """Gestion des stations m√©t√©o avec logique m√©tier claire"""
    
    _name = 'smart_agri_station_meteo'
    _description = 'Station M√©t√©o - Gestion Centralis√©e'
    _order = 'name'
    
    # ========================================
    # CHAMPS D'IDENTIFICATION
    # ========================================
    name = fields.Char('Nom de la station', required=True)
    code = fields.Char('Code unique', required=True, copy=False)
    description = fields.Text('Description de la station')
    
    # ========================================
    # G√âOLOCALISATION
    # ========================================
    latitude = fields.Float('Latitude', required=True, digits=(10, 6))
    longitude = fields.Float('Longitude', required=True, digits=(10, 6))
    altitude = fields.Float('Altitude (m)', digits=(6, 1))
    precision_geolocalisation = fields.Float('Pr√©cision g√©olocalisation (m)', default=100.0)
    
    # ========================================
    # TYPE ET SOURCE DE DONN√âES
    # ========================================
    type_station = fields.Selection([
        ('meteostat', 'üì° Station Meteostat'),
        ('meteo_france', 'üá´üá∑ M√©t√©o France'),
        ('station_locale', 'üè† Station Locale'),
        ('api_externe', 'üîó API Externe'),
        ('satellite', 'üõ∞Ô∏è Donn√©es Satellite'),
        ('autre', '‚öôÔ∏è Autre')
    ], string='Type de station', required=True, default='meteostat')
    
    source_donnees = fields.Char('Source des donn√©es', required=True)
    url_api = fields.Char('URL de l\'API')
    cle_api = fields.Char('Cl√© API', help='Cl√© d\'acc√®s √† l\'API')
    
    # ======================================== 
    # PARAM√àTRES M√âT√âOROLOGIQUES DISPONIBLES
    # ========================================
    parametres_disponibles = fields.Many2many('smart_agri_parametre_meteo', string='Param√®tres disponibles')
    
    # ========================================
    # FR√âQUENCE ET QUALIT√â DES DONN√âES
    # ========================================
    frequence_mise_a_jour = fields.Selection([
        ('temps_reel', '‚è∞ Temps r√©el (5-15 min)'),
        ('horaire', 'üïê Horaire'),
        ('quotidien', 'üìÖ Quotidien'),
        ('hebdomadaire', 'üìÖ Hebdomadaire'),
        ('mensuel', 'üìÖ Mensuel')
    ], string='Fr√©quence de mise √† jour', required=True, default='quotidien')
    
    qualite_donnees = fields.Selection([
        ('excellente', '‚≠ê Excellente (>95%)'),
        ('bonne', '‚≠ê‚≠ê Bonne (85-95%)'),
        ('moyenne', '‚≠ê‚≠ê‚≠ê Moyenne (70-85%)'),
        ('faible', '‚≠ê‚≠ê‚≠ê‚≠ê Faible (<70%)')
    ], string='Qualit√© des donn√©es', default='bonne')
    
    # ========================================
    # STATUT ET ACTIVIT√â
    # ========================================
    state = fields.Selection([
        ('active', '‚úÖ Active'),
        ('inactive', '‚ùå Inactive'),
        ('maintenance', 'üîß En maintenance'),
        ('erreur', 'üö® Erreur'),
        ('test', 'üß™ En test')
    ], string='Statut', default='active')
    
    date_activation = fields.Date('Date d\'activation')
    date_derniere_donnee = fields.Datetime('Derni√®re donn√©e re√ßue')
    date_maintenance = fields.Date('Derni√®re maintenance')
    
    # ========================================
    # RELATIONS AVEC LES EXPLOITATIONS
    # ========================================
    exploitations_associees = fields.Many2many('smart_agri_exploitation', string='Exploitations associ√©es')
    rayon_couverture = fields.Float('Rayon de couverture (km)', default=50.0, help='Rayon dans lequel cette station peut fournir des donn√©es fiables')
    
    # ========================================
    # CONFIGURATION TECHNIQUE
    # ========================================
    format_donnees = fields.Selection([
        ('json', 'JSON'),
        ('xml', 'XML'),
        ('csv', 'CSV'),
        ('autre', 'Autre')
    ], string='Format des donn√©es', default='json')
    
    encodage = fields.Char('Encodage', default='UTF-8')
    fuseau_horaire = fields.Selection([
        ('UTC', 'UTC'),
        ('Europe/Paris', 'Europe/Paris'),
        ('Europe/Brussels', 'Europe/Brussels'),
        ('autre', 'Autre')
    ], string='Fuseau horaire', default='Europe/Paris')
    
    # ========================================
    # M√âTRIQUES DE PERFORMANCE
    # ========================================
    taux_disponibilite = fields.Float('Taux de disponibilit√© (%)', default=99.0)
    taux_erreur = fields.Float('Taux d\'erreur (%)', default=1.0)
    temps_reponse_moyen = fields.Float('Temps de r√©ponse moyen (ms)', default=500.0)
    
    # ========================================
    # NOTES ET DOCUMENTATION
    # ========================================
    notes = fields.Text('Notes techniques')
    documentation_url = fields.Char('URL de la documentation')
    contact_technique = fields.Char('Contact technique')
    
    # ========================================
    # CHAMPS COMPUT√âS
    # ========================================
    nombre_exploitations = fields.Integer('Nombre d\'exploitations', compute='_compute_nombre_exploitations', store=True)
    distance_exploitation_proche = fields.Float('Distance exploitation la plus proche (km)', compute='_compute_distance_exploitation')
    statut_operational = fields.Selection([
        ('operationnel', 'üü¢ Op√©rationnel'),
        ('attention', 'üü° Attention'),
        ('probleme', 'üü† Probl√®me'),
        ('critique', 'üî¥ Critique')
    ], string='Statut op√©rationnel', compute='_compute_statut_operational', store=True)
    
    # ========================================
    # M√âTHODES COMPUT√âES
    # ========================================
    
    @api.depends('exploitations_associees')
    def _compute_nombre_exploitations(self):
        """Calcule le nombre d'exploitations associ√©es"""
        for record in self:
            record.nombre_exploitations = len(record.exploitations_associees)
    
    @api.depends('exploitations_associees', 'latitude', 'longitude')
    def _compute_distance_exploitation(self):
        """Calcule la distance √† l'exploitation la plus proche"""
        for record in self:
            if record.exploitations_associees:
                distances = []
                for exploitation in record.exploitations_associees:
                    if exploitation.latitude and exploitation.longitude:
                        # Calcul simple de distance (formule de Haversine simplifi√©e)
                        import math
                        lat1, lon1 = math.radians(record.latitude), math.radians(record.longitude)
                        lat2, lon2 = math.radians(exploitation.latitude), math.radians(exploitation.longitude)
                        
                        dlat = lat2 - lat1
                        dlon = lon2 - lon1
                        
                        a = math.sin(dlat/2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon/2)**2
                        c = 2 * math.asin(math.sqrt(a))
                        distance = 6371 * c  # Rayon de la Terre en km
                        
                        distances.append(distance)
                
                if distances:
                    record.distance_exploitation_proche = min(distances)
                else:
                    record.distance_exploitation_proche = 0.0
            else:
                record.distance_exploitation_proche = 0.0
    
    @api.depends('state', 'taux_disponibilite', 'taux_erreur', 'date_derniere_donnee')
    def _compute_statut_operational(self):
        """Calcule le statut op√©rationnel de la station"""
        for record in self:
            if record.state != 'active':
                record.statut_operational = 'probleme'
            elif record.taux_disponibilite < 90:
                record.statut_operational = 'critique'
            elif record.taux_erreur > 5:
                record.statut_operational = 'attention'
            elif record.date_derniere_donnee:
                # V√©rifier si les donn√©es sont r√©centes
                delai = datetime.now() - record.date_derniere_donnee
                if delai.days > 7:
                    record.statut_operational = 'attention'
                else:
                    record.statut_operational = 'operationnel'
            else:
                record.statut_operational = 'attention'
    
    # ========================================
    # M√âTHODES M√âTIER
    # ========================================
    
    def action_activer_station(self):
        """Active la station m√©t√©o"""
        for record in self:
            record.state = 'active'
            record.date_activation = fields.Date.today()
            record._compute_statut_operational()
    
    def action_desactiver_station(self):
        """D√©sactive la station m√©t√©o"""
        for record in self:
            record.state = 'inactive'
            record._compute_statut_operational()
    
    def action_maintenance(self):
        """Met la station en maintenance"""
        for record in self:
            record.state = 'maintenance'
            record.date_maintenance = fields.Date.today()
            record._compute_statut_operational()
    
    def action_tester_connexion(self):
        """Teste la connexion √† la station"""
        for record in self:
            try:
                # Simulation de test de connexion
                _logger.info(f"Test de connexion √† la station {record.name}")
                # Ici, on pourrait impl√©menter un vrai test d'API
                record.message_post(body="‚úÖ Test de connexion r√©ussi")
            except Exception as e:
                record.message_post(body=f"‚ùå Erreur de connexion: {str(e)}")
    
    def action_importer_donnees_test(self):
        """Importe des donn√©es de test pour valider la station"""
        for record in self:
            try:
                # Cr√©ation de donn√©es de test
                self.env['smart_agri_meteo'].create({
                    'name': f'Test - {record.name}',
                    'exploitation_id': record.exploitations_associees[0].id if record.exploitations_associees else False,
                    'date_mesure': fields.Date.today(),
                    'temperature': 20.0,
                    'humidite': 65.0,
                    'precipitation': 0.0,
                    'source_station': record.id,
                    'notes': 'Donn√©es de test pour validation de la station'
                })
                record.message_post(body="‚úÖ Donn√©es de test import√©es avec succ√®s")
            except Exception as e:
                record.message_post(body=f"‚ùå Erreur lors de l'import des donn√©es de test: {str(e)}")
    
    # ========================================
    # VALIDATIONS
    # ========================================
    
    @api.constrains('latitude', 'longitude')
    def _check_coordinates(self):
        """V√©rifie la validit√© des coordonn√©es"""
        for record in self:
            if record.latitude < -90 or record.latitude > 90:
                raise ValidationError(_('La latitude doit √™tre comprise entre -90 et 90 degr√©s.'))
            if record.longitude < -180 or record.longitude > 180:
                raise ValidationError(_('La longitude doit √™tre comprise entre -180 et 180 degr√©s.'))
    
    @api.constrains('rayon_couverture')
    def _check_rayon_couverture(self):
        """V√©rifie le rayon de couverture"""
        for record in self:
            if record.rayon_couverture <= 0:
                raise ValidationError(_('Le rayon de couverture doit √™tre strictement positif.'))
            if record.rayon_couverture > 1000:
                raise ValidationError(_('Le rayon de couverture ne peut pas d√©passer 1000 km.'))
    
    @api.constrains('taux_disponibilite', 'taux_erreur')
    def _check_metriques(self):
        """V√©rifie les m√©triques de performance"""
        for record in self:
            if record.taux_disponibilite < 0 or record.taux_disponibilite > 100:
                raise ValidationError(_('Le taux de disponibilit√© doit √™tre compris entre 0 et 100%.'))
            if record.taux_erreur < 0 or record.taux_erreur > 100:
                raise ValidationError(_('Le taux d\'erreur doit √™tre compris entre 0 et 100%.'))
    
    # ========================================
    # M√âTHODES DE RECHERCHE
    # ========================================
    
    @api.model
    def rechercher_station_proche(self, latitude, longitude, rayon_max=100):
        """Recherche la station m√©t√©o la plus proche d'un point donn√©"""
        stations = self.search([
            ('state', '=', 'active'),
            ('statut_operational', '=', 'operationnel')
        ])
        
        station_proche = False
        distance_min = float('inf')
        
        for station in stations:
            # Calcul de distance (formule de Haversine simplifi√©e)
            import math
            lat1, lon1 = math.radians(latitude), math.radians(longitude)
            lat2, lon2 = math.radians(station.latitude), math.radians(station.longitude)
            
            dlat = lat2 - lat1
            dlon = lon2 - lon1
            
            a = math.sin(dlat/2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon/2)**2
            c = 2 * math.asin(math.sqrt(a))
            distance = 6371 * c  # Rayon de la Terre en km
            
            if distance <= rayon_max and distance < distance_min:
                distance_min = distance
                station_proche = station
        
        return station_proche, distance_min
    
    # ========================================
    # M√âTHODES D'INITIALISATION
    # ========================================
    
    @api.model
    def creer_station_meteostat(self, nom, latitude, longitude, exploitation_id=False):
        """Cr√©e automatiquement une station Meteostat pour une exploitation"""
        station = self.create({
            'name': nom,
            'code': f'METEO_{nom.upper().replace(" ", "_")}',
            'type_station': 'meteostat',
            'source_donnees': 'Meteostat API',
            'latitude': latitude,
            'longitude': longitude,
            'frequence_mise_a_jour': 'quotidien',
            'rayon_couverture': 50.0,
            'state': 'active'
        })
        
        if exploitation_id:
            station.exploitations_associees = [(4, exploitation_id)]
        
        return station


class SmartAgriParametreMeteo(models.Model):
    """Param√®tres m√©t√©orologiques disponibles"""
    
    _name = 'smart_agri_parametre_meteo'
    _description = 'Param√®tre M√©t√©orologique'
    _order = 'name'
    
    name = fields.Char('Nom du param√®tre', required=True)
    code = fields.Char('Code', required=True)
    unite = fields.Char('Unit√© de mesure', required=True)
    description = fields.Text('Description')
    icone = fields.Char('Ic√¥ne', default='üå°Ô∏è')
    
    # Cat√©gorie du param√®tre
    categorie = fields.Selection([
        ('temperature', 'üå°Ô∏è Temp√©rature'),
        ('humidite', 'üíß Humidit√©'),
        ('precipitation', 'üåßÔ∏è Pr√©cipitations'),
        ('vent', 'üí® Vent'),
        ('pression', 'üå™Ô∏è Pression'),
        ('ensoleillement', '‚òÄÔ∏è Ensoleillement'),
        ('autre', '‚öôÔ∏è Autre')
    ], string='Cat√©gorie', required=True)
    
    # Param√®tres de validation
    valeur_min = fields.Float('Valeur minimale')
    valeur_max = fields.Float('Valeur maximale')
    valeur_defaut = fields.Float('Valeur par d√©faut')
    
    # Importance pour l'agriculture
    importance_agricole = fields.Selection([
        ('critique', 'üî¥ Critique'),
        ('elevee', 'üü† √âlev√©e'),
        ('moyenne', 'üü° Moyenne'),
        ('faible', 'üü¢ Faible')
    ], string='Importance agricole', default='moyenne')
    
    active = fields.Boolean('Actif', default=True)
    
    @api.model
    def initialiser_parametres_standards(self):
        """Initialise les param√®tres m√©t√©orologiques standards"""
        parametres = [
            # Temp√©ratures
            {'name': 'Temp√©rature moyenne', 'code': 'TEMP_AVG', 'unite': '¬∞C', 'categorie': 'temperature', 'importance_agricole': 'critique', 'valeur_min': -50, 'valeur_max': 60},
            {'name': 'Temp√©rature minimale', 'code': 'TEMP_MIN', 'unite': '¬∞C', 'categorie': 'temperature', 'importance_agricole': 'critique', 'valeur_min': -50, 'valeur_max': 60},
            {'name': 'Temp√©rature maximale', 'code': 'TEMP_MAX', 'unite': '¬∞C', 'categorie': 'temperature', 'importance_agricole': 'critique', 'valeur_min': -50, 'valeur_max': 60},
            
            # Humidit√©
            {'name': 'Humidit√© relative', 'code': 'HUMIDITY', 'unite': '%', 'categorie': 'humidite', 'importance_agricole': 'elevee', 'valeur_min': 0, 'valeur_max': 100},
            {'name': 'Point de ros√©e', 'code': 'DEW_POINT', 'unite': '¬∞C', 'categorie': 'humidite', 'importance_agricole': 'moyenne', 'valeur_min': -50, 'valeur_max': 60},
            
            # Pr√©cipitations
            {'name': 'Pr√©cipitations totales', 'code': 'PRECIP', 'unite': 'mm', 'categorie': 'precipitation', 'importance_agricole': 'critique', 'valeur_min': 0, 'valeur_max': 1000},
            {'name': 'Intensit√© des pr√©cipitations', 'code': 'PRECIP_INT', 'unite': 'mm/h', 'categorie': 'precipitation', 'importance_agricole': 'elevee', 'valeur_min': 0, 'valeur_max': 200},
            
            # Vent
            {'name': 'Vitesse du vent', 'code': 'WIND_SPEED', 'unite': 'km/h', 'categorie': 'vent', 'importance_agricole': 'moyenne', 'valeur_min': 0, 'valeur_max': 200},
            {'name': 'Direction du vent', 'code': 'WIND_DIR', 'unite': '¬∞', 'categorie': 'vent', 'importance_agricole': 'faible', 'valeur_min': 0, 'valeur_max': 360},
            
            # Pression
            {'name': 'Pression atmosph√©rique', 'code': 'PRESSURE', 'unite': 'hPa', 'categorie': 'pression', 'importance_agricole': 'faible', 'valeur_min': 800, 'valeur_max': 1200},
            
            # Ensoleillement
            {'name': 'Dur√©e d\'ensoleillement', 'code': 'SUNSHINE', 'unite': 'h', 'categorie': 'ensoleillement', 'importance_agricole': 'elevee', 'valeur_min': 0, 'valeur_max': 24},
            {'name': 'Rayonnement solaire', 'code': 'SOLAR_RAD', 'unite': 'W/m¬≤', 'categorie': 'ensoleillement', 'importance_agricole': 'moyenne', 'valeur_min': 0, 'valeur_max': 1500},
        ]
        
        for param in parametres:
            if not self.search([('code', '=', param['code'])]):
                self.create(param)
