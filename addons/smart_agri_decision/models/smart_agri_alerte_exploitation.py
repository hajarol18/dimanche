# -*- coding: utf-8 -*-

from odoo import models, fields, api, _
from odoo.exceptions import ValidationError


class SmartAgriAlerteExploitation(models.Model):
    _name = 'smart_agri_alerte_exploitation'
    _description = 'Alertes climatiques par exploitation'
    _order = 'date_creation desc'
    
    # Relations
    exploitation_id = fields.Many2one(
        'smart_agri_exploitation', 
        string='Exploitation',
        required=True,
        ondelete='cascade'
    )
    
    # Informations de l'alerte
    type_alerte = fields.Selection([
        ('gel', 'Risque de Gel'),
        ('secheresse', 'Sécheresse'),
        ('canicule', 'Canicule'),
        ('vent', 'Vent Fort'),
        ('pluie', 'Pluie Excessive'),
        ('orage', 'Orage'),
        ('inondation', 'Risque d\'Inondation')
    ], string='Type d\'Alerte', required=True, default='gel')
    
    niveau_critique = fields.Selection([
        ('faible', 'Faible'),
        ('modere', 'Modéré'),
        ('eleve', 'Élevé'),
        ('critique', 'Critique')
    ], string='Niveau Critique', required=True, default='modere')
    
    # Détails de l'alerte
    titre = fields.Char('Titre de l\'Alerte', required=True)
    message = fields.Text('Message d\'Alerte', required=True)
    recommandations = fields.Text('Recommandations')
    
    # Données météo associées
    temperature = fields.Float('Température (°C)')
    humidite = fields.Float('Humidité (%)')
    precipitation = fields.Float('Précipitations (mm)')
    vitesse_vent = fields.Float('Vitesse du Vent (km/h)')
    
    # Gestion de l'alerte
    date_creation = fields.Datetime('Date de Création', default=fields.Datetime.now)
    date_debut = fields.Datetime('Date de Début')
    date_fin = fields.Datetime('Date de Fin')
    active = fields.Boolean('Active', default=True)
    
    # Statut de l'alerte
    statut = fields.Selection([
        ('active', 'Active'),
        ('resolue', 'Résolue'),
        ('ignoree', 'Ignorée'),
        ('expiree', 'Expirée')
    ], string='Statut', default='active', required=True)
    
    # Actions prises
    actions_prises = fields.Text('Actions Prises')
    responsable = fields.Many2one('res.users', string='Responsable', default=lambda self: self.env.user)
    
    # Contraintes et validations
    @api.constrains('date_debut', 'date_fin')
    def _check_dates(self):
        for record in self:
            if record.date_debut and record.date_fin and record.date_debut > record.date_fin:
                raise ValidationError(_('La date de début doit être antérieure à la date de fin.'))
    
    @api.constrains('temperature')
    def _check_temperature(self):
        for record in self:
            if record.temperature and (record.temperature < -50 or record.temperature > 60):
                raise ValidationError(_('La température doit être comprise entre -50°C et 60°C.'))
    
    # Méthodes d'aide
    @api.model
    def creer_alerte_automatique(self, exploitation_id, type_alerte, niveau_critique, message, **kwargs):
        """Créer une alerte automatique pour une exploitation"""
        return self.create({
            'exploitation_id': exploitation_id,
            'type_alerte': type_alerte,
            'niveau_critique': niveau_critique,
            'titre': f"Alerte {type_alerte.title()} - {exploitation_id.name}",
            'message': message,
            'date_debut': fields.Datetime.now(),
            **kwargs
        })
    
    def action_resoudre_alerte(self):
        """Marquer l'alerte comme résolue"""
        self.write({
            'statut': 'resolue',
            'date_fin': fields.Datetime.now()
        })
    
    def action_ignorer_alerte(self):
        """Ignorer l'alerte"""
        self.write({
            'statut': 'ignoree',
            'date_fin': fields.Datetime.now()
        })
    
    def action_reactiver_alerte(self):
        """Réactiver une alerte résolue ou ignorée"""
        self.write({
            'statut': 'active',
            'date_fin': False
        })
    
    # Calculs automatiques
    @api.depends('date_creation', 'date_fin')
    def _compute_duree_alerte(self):
        """Calculer la durée de l'alerte"""
        for record in self:
            if record.date_creation and record.date_fin:
                duree = record.date_fin - record.date_creation
                record.duree_alerte = duree.total_seconds() / 3600  # en heures
            else:
                record.duree_alerte = 0
    
    duree_alerte = fields.Float('Durée (heures)', compute='_compute_duree_alerte', store=True)
    
    # Nom de l'alerte pour l'affichage
    name = fields.Char('Nom', compute='_compute_name', store=True)
    
    @api.depends('type_alerte', 'exploitation_id', 'date_creation')
    def _compute_name(self):
        for record in self:
            if record.exploitation_id and record.type_alerte:
                record.name = f"{record.type_alerte.title()} - {record.exploitation_id.name}"
            else:
                record.name = "Nouvelle Alerte"
