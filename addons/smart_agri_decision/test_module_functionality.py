#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Test de fonctionnalit√© du module SmartAgriDecision
Ce fichier permet de tester que le module se charge correctement
"""

import logging

_logger = logging.getLogger(__name__)

def test_module_loading(env):
    """Test que le module se charge correctement"""
    try:
        # Test de chargement des mod√®les
        soil_type = env['smart_agri_soil_type']
        exploitation = env['smart_agri_exploitation']
        parcelle = env['smart_agri_parcelle']
        culture = env['smart_agri_culture']
        rotation = env['smart_agri_rotation_culturelle']
        objectif = env['smart_agri_objectif_rotation']
        
        _logger.info("‚úÖ Tous les mod√®les se chargent correctement")
        return True
        
    except Exception as e:
        _logger.error(f"‚ùå Erreur lors du chargement des mod√®les: {e}")
        return False

def test_menu_creation(env):
    """Test que les menus sont cr√©√©s correctement"""
    try:
        # V√©rifier que le menu principal existe
        menu_root = env.ref('smart_agri_decision.menu_smart_agri_root')
        menu_analyse = env.ref('smart_agri_decision.menu_analyse')
        menu_rotation = env.ref('smart_agri_decision.menu_smart_agri_rotation_culturelle')
        
        _logger.info("‚úÖ Tous les menus sont cr√©√©s correctement")
        return True
        
    except Exception as e:
        _logger.error(f"‚ùå Erreur lors de la v√©rification des menus: {e}")
        return False

def run_tests(env):
    """Ex√©cute tous les tests"""
    _logger.info("üß™ D√©marrage des tests du module SmartAgriDecision...")
    
    tests_passed = 0
    total_tests = 2
    
    if test_module_loading(env):
        tests_passed += 1
        
    if test_menu_creation(env):
        tests_passed += 1
    
    _logger.info(f"üìä R√©sultats des tests: {tests_passed}/{total_tests} tests r√©ussis")
    
    if tests_passed == total_tests:
        _logger.info("üéâ Tous les tests sont pass√©s avec succ√®s !")
        return True
    else:
        _logger.error("üí• Certains tests ont √©chou√©")
        return False
