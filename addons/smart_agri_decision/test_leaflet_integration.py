#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Test de l'int√©gration Leaflet pour la cartographie
Ce fichier teste la fonctionnalit√© de cartographie interactive
"""

import logging

_logger = logging.getLogger(__name__)

def test_leaflet_assets_loading(env):
    """Test que les assets Leaflet se chargent correctement"""
    try:
        # V√©rifier que les assets Leaflet sont disponibles
        assets = env['ir.asset'].search([
            ('name', 'ilike', 'leaflet'),
            ('bundle', '=', 'web.assets_backend')
        ])
        
        if assets:
            _logger.info(f"‚úÖ Assets Leaflet trouv√©s: {len(assets)}")
            return True
        else:
            _logger.warning("‚ö†Ô∏è Aucun asset Leaflet trouv√© - v√©rifiez l'int√©gration")
            return False
            
    except Exception as e:
        _logger.error(f"‚ùå Erreur lors de la v√©rification des assets Leaflet: {e}")
        return False

def test_parcelle_geolocation(env):
    """Test la g√©olocalisation des parcelles"""
    try:
        # Cr√©er une parcelle de test avec g√©olocalisation
        parcelle_data = {
            'name': 'Test Parcelle G√©olocalis√©e',
            'surface': 10.5,
            'latitude': 48.8566,
            'longitude': 2.3522,
            'notes': 'Parcelle de test pour validation g√©olocalisation'
        }
        
        parcelle = env['smart_agri_parcelle'].create(parcelle_data)
        
        if parcelle and parcelle.latitude and parcelle.longitude:
            _logger.info("‚úÖ Parcelle avec g√©olocalisation cr√©√©e avec succ√®s")
            # Nettoyer le test
            parcelle.unlink()
            return True
        else:
            _logger.error("‚ùå √âchec de la cr√©ation de la parcelle g√©olocalis√©e")
            return False
            
    except Exception as e:
        _logger.error(f"‚ùå Erreur lors de la cr√©ation de la parcelle g√©olocalis√©e: {e}")
        return False

def test_exploitation_geolocation(env):
    """Test la g√©olocalisation des exploitations"""
    try:
        # Cr√©er une exploitation de test avec g√©olocalisation
        exploitation_data = {
            'name': 'Test Exploitation G√©olocalis√©e',
            'adresse': '123 Rue de Test, 75001 Paris',
            'latitude': 48.8566,
            'longitude': 2.3522,
            'notes': 'Exploitation de test pour validation g√©olocalisation'
        }
        
        exploitation = env['smart_agri_exploitation'].create(exploitation_data)
        
        if exploitation and exploitation.latitude and exploitation.longitude:
            _logger.info("‚úÖ Exploitation avec g√©olocalisation cr√©√©e avec succ√®s")
            # Nettoyer le test
            exploitation.unlink()
            return True
        else:
            _logger.error("‚ùå √âchec de la cr√©ation de l'exploitation g√©olocalis√©e")
            return False
            
    except Exception as e:
        _logger.error(f"‚ùå Erreur lors de la cr√©ation de l'exploitation g√©olocalis√©e: {e}")
        return False

def run_leaflet_tests(env):
    """Ex√©cute tous les tests Leaflet"""
    _logger.info("üß™ D√©marrage des tests d'int√©gration Leaflet...")
    
    tests_passed = 0
    total_tests = 3
    
    if test_leaflet_assets_loading(env):
        tests_passed += 1
        
    if test_parcelle_geolocation(env):
        tests_passed += 1
        
    if test_exploitation_geolocation(env):
        tests_passed += 1
    
    _logger.info(f"üìä R√©sultats des tests Leaflet: {tests_passed}/{total_tests} tests r√©ussis")
    
    if tests_passed == total_tests:
        _logger.info("üéâ Tous les tests Leaflet sont pass√©s avec succ√®s !")
        return True
    else:
        _logger.error("üí• Certains tests Leaflet ont √©chou√©")
        return False
