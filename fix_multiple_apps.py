#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
SCRIPT POUR R√âSOUDRE LE PROBL√àME DES MULTIPLES APPLICATIONS
D√©sactive les modules non n√©cessaires et garde seulement SmartAgriDecision
"""

import xmlrpc.client
import sys
import time

def fix_multiple_apps():
    """D√©sactive les modules non n√©cessaires pour garder seulement SmartAgriDecision"""
    
    # Configuration de connexion
    url = "http://localhost:10020"
    db = "odoo123"
    username = "hajar"
    password = "hajar"
    
    try:
        print("üîß R√âSOLUTION DU PROBL√àME DES MULTIPLES APPLICATIONS")
        print("=" * 60)
        
        # Connexion √† Odoo
        print("üîå Connexion √† Odoo...")
        common = xmlrpc.client.ServerProxy(f'{url}/xmlrpc/2/common')
        uid = common.authenticate(db, username, password, {})
        
        if not uid:
            print("‚ùå √âchec de l'authentification")
            return False
        
        print(f"‚úÖ Connect√© avec l'utilisateur ID: {uid}")
        
        # Connexion aux mod√®les
        models = xmlrpc.client.ServerProxy(f'{url}/xmlrpc/2/object')
        
        # Modules √† d√©sactiver (garder seulement smart_agri_decision)
        modules_to_disable = [
            'estate',
            'estate1', 
            'gestion_bibliotheque',
            'test_minimal',
            'test_module'
        ]
        
        print("\nüì¶ V√âRIFICATION DES MODULES INSTALL√âS...")
        
        # V√©rifier l'√©tat de tous les modules
        all_modules = models.execute_kw(db, uid, password, 'ir.module.module', 'search_read', 
                                      [[('name', 'in', modules_to_disable + ['smart_agri_decision'])]], 
                                      {'fields': ['name', 'state', 'application']})
        
        print("üìä √âtat actuel des modules:")
        for module in all_modules:
            status_icon = "‚úÖ" if module['state'] == 'installed' else "‚ùå"
            app_icon = "üì±" if module.get('application') else "üîß"
            print(f"  {status_icon} {app_icon} {module['name']}: {module['state']}")
        
        print("\nüö´ D√âSACTIVATION DES MODULES NON N√âCESSAIRES...")
        
        for module_name in modules_to_disable:
            try:
                # Chercher le module
                module = models.execute_kw(db, uid, password, 'ir.module.module', 'search', 
                                         [[('name', '=', module_name)]])
                
                if module:
                    module_id = module[0]
                    
                    # V√©rifier s'il est install√©
                    module_info = models.execute_kw(db, uid, password, 'ir.module.module', 'read', 
                                                  [module_id], ['state'])
                    
                    if module_info and module_info[0]['state'] == 'installed':
                        print(f"  üîÑ D√©sinstallation de {module_name}...")
                        
                        # D√©sinstaller le module
                        models.execute_kw(db, uid, password, 'ir.module.module', 'button_immediate_uninstall', [module_id])
                        print(f"  ‚úÖ {module_name} d√©sinstall√©")
                    else:
                        print(f"  ‚è≠Ô∏è {module_name} d√©j√† d√©sinstall√©")
                else:
                    print(f"  ‚è≠Ô∏è {module_name} non trouv√©")
                    
            except Exception as e:
                print(f"  ‚ö†Ô∏è Erreur avec {module_name}: {str(e)}")
        
        # Attendre un peu pour que les changements prennent effet
        print("\n‚è≥ Attente de la finalisation des changements...")
        time.sleep(5)
        
        print("\n‚úÖ V√âRIFICATION FINALE...")
        
        # V√©rifier l'√©tat final
        final_modules = models.execute_kw(db, uid, password, 'ir.module.module', 'search_read', 
                                        [[('name', 'in', modules_to_disable + ['smart_agri_decision'])]], 
                                        {'fields': ['name', 'state', 'application']})
        
        print("üìä √âtat final des modules:")
        for module in final_modules:
            status_icon = "‚úÖ" if module['state'] == 'installed' else "‚ùå"
            app_icon = "üì±" if module.get('application') else "üîß"
            print(f"  {status_icon} {app_icon} {module['name']}: {module['state']}")
        
        # V√©rifier que SmartAgriDecision est toujours actif
        smart_agri = [m for m in final_modules if m['name'] == 'smart_agri_decision']
        if smart_agri and smart_agri[0]['state'] == 'installed':
            print("\nüéâ SUCC√àS: SmartAgriDecision est le seul module actif !")
            print("üåê Allez sur http://localhost:10020 pour v√©rifier")
            print("üì± Vous ne devriez voir qu'une seule application maintenant")
        else:
            print("\n‚ö†Ô∏è ATTENTION: SmartAgriDecision n'est pas actif")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la r√©solution: {str(e)}")
        return False

if __name__ == "__main__":
    print("üîß R√âSOLUTION DU PROBL√àME DES MULTIPLES APPLICATIONS")
    print("=" * 60)
    
    success = fix_multiple_apps()
    
    if success:
        print("\n‚úÖ R√âSOLUTION TERMIN√âE AVEC SUCC√àS !")
        print("üéØ Vous ne devriez plus avoir qu'une seule application")
    else:
        print("\n‚ùå √âCHEC: V√©rification manuelle n√©cessaire")
    
    print("\n" + "=" * 60)
