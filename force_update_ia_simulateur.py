#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de mise √† jour forc√©e du mod√®le ia_simulateur
Force Odoo √† reconna√Ætre les nouveaux champs et m√©thodes
"""

import xmlrpc.client
import sys
import time

def force_update_module():
    """Force la mise √† jour du module smart_agri_decision"""
    
    # Configuration de connexion
    url = "http://localhost:10020"
    db = "odoo123"
    username = "admin"
    password = "admin"
    
    try:
        print("üîå Connexion √† Odoo...")
        
        # Connexion √† Odoo
        common = xmlrpc.client.ServerProxy(f'{url}/xmlrpc/2/common')
        uid = common.authenticate(db, username, password, {})
        
        if not uid:
            print("‚ùå √âchec de l'authentification")
            return False
        
        print(f"‚úÖ Connect√© avec l'utilisateur ID: {uid}")
        
        # Connexion aux mod√®les
        models = xmlrpc.client.ServerProxy(f'{url}/xmlrpc/2/object')
        
        # √âTAPE 1: V√©rifier l'√©tat du module
        print("\nüìä V√©rification de l'√©tat du module...")
        module = models.execute_kw(db, uid, password, 'ir.module.module', 'search_read', 
                                 [[('name', '=', 'smart_agri_decision')]], 
                                 ['name', 'state', 'latest_version'])
        
        if not module:
            print("‚ùå Module smart_agri_decision non trouv√©")
            return False
        
        module_info = module[0]
        print(f"üì¶ Module: {module_info['name']}")
        print(f"üìä √âtat: {module_info['state']}")
        print(f"üî¢ Version: {module_info['latest_version']}")
        
        # √âTAPE 2: Forcer la mise √† jour du module
        print("\nüîÑ Mise √† jour forc√©e du module...")
        
        # D√©sinstaller compl√®tement le module
        print("üóëÔ∏è D√©sinstallation compl√®te...")
        models.execute_kw(db, uid, password, 'ir.module.module', 'button_immediate_uninstall', 
                         [module_info['id']])
        
        # Attendre que la d√©sinstallation soit termin√©e
        print("‚è≥ Attente de la d√©sinstallation...")
        time.sleep(10)
        
        # R√©installer le module
        print("üì• R√©installation du module...")
        models.execute_kw(db, uid, password, 'ir.module.module', 'button_immediate_install', 
                         [module_info['id']])
        
        # Attendre que l'installation soit termin√©e
        print("‚è≥ Attente de l'installation...")
        time.sleep(15)
        
        # √âTAPE 3: V√©rifier que le mod√®le est bien cr√©√©
        print("\nüîç V√©rification du mod√®le ia_simulateur...")
        
        # V√©rifier que le mod√®le existe
        model_exists = models.execute_kw(db, uid, password, 'ir.model', 'search_count', 
                                       [[('model', '=', 'smart_agri_ia_simulateur')]])
        
        if model_exists:
            print("‚úÖ Mod√®le smart_agri_ia_simulateur cr√©√© avec succ√®s")
            
            # V√©rifier les champs
            fields = models.execute_kw(db, uid, password, 'ir.model.fields', 'search_read', 
                                     [[('model', '=', 'smart_agri_ia_simulateur')]], 
                                     ['name', 'field_description'])
            
            print(f"üìã Champs trouv√©s: {len(fields)}")
            for field in fields:
                print(f"  - {field['name']}: {field['field_description']}")
            
            # V√©rifier les vues
            views = models.execute_kw(db, uid, password, 'ir.ui.view', 'search_count', 
                                    [[('model', '=', 'smart_agri_ia_simulateur')]])
            
            print(f"üëÅÔ∏è Vues trouv√©es: {views}")
            
        else:
            print("‚ùå Mod√®le smart_agri_ia_simulateur non trouv√© apr√®s installation")
            return False
        
        # √âTAPE 4: Tester la cr√©ation d'un enregistrement
        print("\nüß™ Test de cr√©ation d'un enregistrement...")
        
        try:
            # Cr√©er un enregistrement de test
            test_record = models.execute_kw(db, uid, password, 'smart_agri_ia_simulateur', 'create', [{
                'name': 'Test Simulation IA',
                'description': 'Test de mise √† jour forc√©e',
                'exploitation_id': 1,  # ID de la premi√®re exploitation
                'scenario_rcp': 'rcp45',
                'type_culture': 'cereales',
                'stade_developpement': 'semis',
                'type_sol': 'argileux'
            }])
            
            print(f"‚úÖ Enregistrement de test cr√©√© avec ID: {test_record}")
            
            # Supprimer l'enregistrement de test
            models.execute_kw(db, uid, password, 'smart_agri_ia_simulateur', 'unlink', [test_record])
            print("üóëÔ∏è Enregistrement de test supprim√©")
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur lors du test: {str(e)}")
            # Ce n'est pas critique, continuons
        
        print("\nüéâ Mise √† jour forc√©e termin√©e avec succ√®s !")
        print("üí° Vous pouvez maintenant tester la Simulation Interactive dans Odoo")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la mise √† jour forc√©e: {str(e)}")
        return False

if __name__ == "__main__":
    print("üöÄ SCRIPT DE MISE √Ä JOUR FORC√âE - IA SIMULATEUR")
    print("=" * 50)
    
    success = force_update_module()
    
    if success:
        print("\n‚úÖ SUCC√àS: Module mis √† jour avec succ√®s")
        print("üåê Allez sur http://localhost:10020 pour tester")
    else:
        print("\n‚ùå √âCHEC: Probl√®me lors de la mise √† jour")
        print("üîß V√©rifiez les logs Odoo pour plus de d√©tails")
    
    print("\n" + "=" * 50)
